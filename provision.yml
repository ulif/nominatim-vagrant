# Ansible playbook to install OSM nomiatim server
# in local Ubuntu 16.04 vagrant box.
#
# This is the basic install (no real map data (yet))
# Following loosely:
#
#   https://github.com/openstreetmap/Nominatim/blob/master/docs/install-on-ubuntu-16.md
#
# This script requires an existent user on the target system. You can set the
# user and userhome below.
#
---
- hosts: all
  #  Do not set this to "yes". This would break `username` determination below.
  become: no
  vars:
    # do you want test packages installed (additionally)?
    install_test_packages: false
    # username to install nominatim as
    username: "{{ ansible_ssh_user }}"
    userhome: "/home/{{ username }}"
  handlers:
  - name: Restart postgres server
    become: yes
    service:
      name: postgresql
      state: restarted
  - name: Restart apache server
    become: yes
    service:
      name: apache2
      state: restarted

  tasks:
  - name: Update package cache if not done in last 24 hours.
    apt: update_cache=yes cache_valid_time=86400
    become: yes

  - name: Install system packages
    package:
      name={{ item }}
      state=present
    become: yes
    with_items:
      - aptitude

  - name: Aptitude safe-upgrade
    apt: upgrade=safe
    become: yes

  - name: Install all packages needed for Nominatim
    apt:
      name: "{{ item }}"
      state: present
    become: yes
    with_items:
      - build-essential
      - cmake
      - g++
      - libboost-dev
      - libboost-system-dev
      - libboost-filesystem-dev
      - libexpat1-dev
      - zlib1g-dev
      - libxml2-dev
      - libbz2-dev
      - libpq-dev
      - libgeos-dev
      - libgeos++-dev
      - libproj-dev
      - postgresql-server-dev-9.5
      - postgresql-9.5-postgis-2.2
      - postgresql-contrib-9.5
      - apache2
      - php
      - php-pgsql
      - libapache2-mod-php
      - php-pear
      - php-db
      - php-intl
      - git
      - acl     #  for safe privilege escalation with ansible

  - name: Install additional packages to run the test suite
    apt:
      name: "{{ item }}"
      state: present
    become: yes
    when: install_test_packages
    with_items:
      - python3-dev
      - python3-pip
      - python3-psycopg2
      - python3-tidylib
      - phpunit

  - name: Install additional python packages to run test suite
    become: no
    pip:
      name: "{{ item }}"
      state: present
      extra_args: "--user"
      executable: pip3
    with_items:
      - "behave"
      - "nose"
    when: install_test_packages

  - name: Install php codesniffer if test_suite is wanted
    pear:
      name: PHP_CodeSniffer
      state: present
    become: yes
    when: install_test_packages

  - name: Create postgres user {{ username }}
    become: yes
    become_user: postgres
    postgresql_user:
      name: "{{ username }}"
      role_attr_flags: SUPERUSER
      state: present

  - name: Create postgres user "www-data"
    become: yes
    become_user: postgres
    postgresql_user:
      name: www-data
      state: present

  - name: Copy over apache config
    become: yes
    template:
      src: templates/apache_nominatim.conf
      dest: /etc/apache2/conf-available/nominatim.conf
      owner: root

  - name: Enable new apache config
    become: yes
    shell: /usr/sbin/a2enconf nominatim
    args:
      creates: /etc/apache2/conf-enabled/nominatim.conf
    notify: Restart apache server

  - name: Clone nominatim from github to {{ userhome }}
    git:
      repo: git://github.com/openstreetmap/Nominatim.git
      dest: "{{ userhome }}/Nominatim"
      recursive: yes
      update: yes
    register: git_clone

  - name: Get OSM country grid
    get_url:
      url: http://www.nominatim.org/data/country_grid.sql.gz
      dest: "{{ userhome }}/Nominatim/data/country_osm_grid.sql.gz"

  - name: Create build dir {{ userhome }}/build/
    file:
      path: "{{ userhome }}/build"
      state: directory

  - name: Build nominatim in {{ userhome }}/build/
    command: /usr/bin/cmake "{{ userhome }}/Nominatim"
    args:
      chdir: "{{ userhome }}/build/"
    when: git_clone.changed

  - name: Run `make` in {{ userhome }}/build/ (this can take several minutes)
    command: /usr/bin/make
    args:
      chdir: "{{ userhome }}/build/"
    when: git_clone.changed

  - name: Copy over local.php template
    template:
      src: templates/local.php
      dest: "{{ userhome }}/build/settings/local.php"

